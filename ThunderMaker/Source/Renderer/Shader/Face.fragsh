#version 120

/*
 Copyright (C) 2010-2012 Kristian Duske
 
 This file is part of TrenchBroom.
 
 TrenchBroom is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 TrenchBroom is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with TrenchBroom.  If not, see <http://www.gnu.org/licenses/>.
 */

uniform float Brightness;
uniform bool ApplyTexture;
uniform sampler2D FaceTexture;
uniform bool ApplyTinting;
uniform vec4 TintColor;
uniform bool GrayScale;
uniform bool RenderGrid;
uniform float GridSize;
uniform float GridAlpha;
uniform bool GridCheckerboard;

varying vec4 modelCoordinates;
varying vec3 modelNormal;
varying vec4 faceColor;

void gridCheckerboardXY() {
    bool evenX = mod(floor(modelCoordinates.x / GridSize), 2) == 0;
    bool evenY = mod(floor(modelCoordinates.y / GridSize), 2) == 0;
    
    if (evenX == evenY)
        gl_FragColor = vec4(gl_FragColor.r + (GridAlpha / 10.0), gl_FragColor.g + (GridAlpha / 10.0), gl_FragColor.b + (GridAlpha / 10.0), gl_FragColor.a);
    else
        gl_FragColor = vec4(gl_FragColor.r - (GridAlpha / 10.0), gl_FragColor.g - (GridAlpha / 10.0), gl_FragColor.b - (GridAlpha / 10.0), gl_FragColor.a);
}

void gridCheckerboardXZ() {
    bool evenX = mod(floor(modelCoordinates.x / GridSize), 2) == 0;
    bool evenZ = mod(floor(modelCoordinates.z / GridSize), 2) == 0;
    
    if (evenX == evenZ)
        gl_FragColor = vec4(gl_FragColor.r + (GridAlpha / 10.0), gl_FragColor.g + (GridAlpha / 10.0), gl_FragColor.b + (GridAlpha / 10.0), gl_FragColor.a);
    else
        gl_FragColor = vec4(gl_FragColor.r - (GridAlpha / 10.0), gl_FragColor.g - (GridAlpha / 10.0), gl_FragColor.b - (GridAlpha / 10.0), gl_FragColor.a);
}

void gridCheckerboardYZ() {
    bool evenY = mod(floor(modelCoordinates.y / GridSize), 2) == 0;
    bool evenZ = mod(floor(modelCoordinates.z / GridSize), 2) == 0;
    
    if (evenY == evenZ)
        gl_FragColor = vec4(gl_FragColor.r + (GridAlpha / 10.0), gl_FragColor.g + (GridAlpha / 10.0), gl_FragColor.b + (GridAlpha / 10.0), gl_FragColor.a);
    else
        gl_FragColor = vec4(gl_FragColor.r - (GridAlpha / 10.0), gl_FragColor.g - (GridAlpha / 10.0), gl_FragColor.b - (GridAlpha / 10.0), gl_FragColor.a);
}

void gridLinesXY() {
    if (abs(mod(modelCoordinates.x + 0.3, 64)) <= 0.6 ||
        abs(mod(modelCoordinates.y + 0.3, 64)) <= 0.6)
        gl_FragColor = vec4(mix(gl_FragColor.rgb, vec3(1.0), (GridAlpha / 2.0) * 1.5), gl_FragColor.a);
    else if (abs(mod(modelCoordinates.x + 0.3, GridSize)) <= 0.6 ||
        abs(mod(modelCoordinates.y + 0.3, GridSize)) <= 0.6)
        gl_FragColor = vec4(mix(gl_FragColor.rgb, vec3(1.0), (GridAlpha / 2.0)), gl_FragColor.a);
}

void gridLinesXZ() {
    if (abs(mod(modelCoordinates.x + 0.3, 64)) <= 0.6 ||
        abs(mod(modelCoordinates.z + 0.3, 64)) <= 0.6)
        gl_FragColor = vec4(mix(gl_FragColor.rgb, vec3(1.0), (GridAlpha / 2.0) * 1.5), gl_FragColor.a);
    else if (abs(mod(modelCoordinates.x + 0.3, GridSize)) <= 0.6 ||
        abs(mod(modelCoordinates.z + 0.3, GridSize)) <= 0.6)
        gl_FragColor = vec4(mix(gl_FragColor.rgb, vec3(1.0), (GridAlpha / 2.0)), gl_FragColor.a);
}

void gridLinesYZ() {
    if (abs(mod(modelCoordinates.y + 0.3, 64)) <= 0.6 ||
        abs(mod(modelCoordinates.z + 0.3, 64)) <= 0.6)
        gl_FragColor = vec4(mix(gl_FragColor.rgb, vec3(1.0), (GridAlpha / 2.0) * 1.5), gl_FragColor.a);
    else if (abs(mod(modelCoordinates.y + 0.3, GridSize)) <= 0.6 ||
        abs(mod(modelCoordinates.z + 0.3, GridSize)) <= 0.6)
        gl_FragColor = vec4(mix(gl_FragColor.rgb, vec3(1.0), (GridAlpha / 2.0)), gl_FragColor.a);
}
 
void main() {
    if (ApplyTexture)
        gl_FragColor = texture2D(FaceTexture, gl_TexCoord[0].st);
    else
        gl_FragColor = faceColor;
    
    gl_FragColor = vec4(vec3(Brightness / 2.0 * gl_FragColor), gl_FragColor.a);
    gl_FragColor = clamp(2.0 * gl_FragColor, 0.0, 1.0);

    if (GrayScale) {
        float gray = dot(gl_FragColor.rgb, vec3(0.299, 0.587, 0.114));
        gl_FragColor = vec4(gray, gray, gray, gl_FragColor.a);
    }
    
    if (ApplyTinting) {
        gl_FragColor = vec4(gl_FragColor.rgb * TintColor.rgb * TintColor.a, gl_FragColor.a);
        gl_FragColor = clamp(2.0 * gl_FragColor, 0.0, 1.0);
    }
    
    if (RenderGrid && GridAlpha > 0.0) {
        float normX = abs(modelNormal.x);
        float normY = abs(modelNormal.y);
        float normZ = abs(modelNormal.z);
        if (normX > normY) {
            if (normX > normZ) {
                if (GridCheckerboard)
                    gridCheckerboardYZ();
                else
                    gridLinesYZ();
            } else {
                if (GridCheckerboard)
                    gridCheckerboardXY();
                else
                    gridLinesXY();
            }
        } else if (normY > normZ) {
            if (GridCheckerboard)
                gridCheckerboardXZ();
            else
                gridLinesXZ();
        } else {
            if (GridCheckerboard)
                gridCheckerboardXY();
            else
                gridLinesXY();
        }
    }
}
